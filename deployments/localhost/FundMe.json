{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae5d989cf3e6ba147c0dd286b47780b40565e27080d279b811ef59971095a828",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "969190",
    "logsBloom": "0x
    "blockHash": "0x8165469d343fb8a9fb4c07268bed5e3860f6d385a0f79b291e0aee0fb111b7f6",
    "transactionHash": "0xae5d989cf3e6ba147c0dd286b47780b40565e27080d279b811ef59971095a828",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "969190",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "f3d50f8e067f660ae77e3500c162e71f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"bones\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"this implements price feeds\"},\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"FundMe: A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function funds this contract\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\"; // u have to import its package using yarn or npm otherwise error\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n//changing all the require to revert and adding their error would be more gas effiient\\n// than require bcoz in require u have to store an entire string of error\\n\\n/**\\n * @title FundMe: A contract for crowd funding\\n * @author bones\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice this function funds this contract\\n     * @dev this implements price feeds\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    // function getVersion() public view returns (uint256){\\n    //     // ETH/USD price feed address of Sepolia Network.\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n    //     return priceFeed.version();\\n    // }\\n    \\n    \\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n    \\n    \\n    // function cheaperWithdraw() public onlyOwner {\\n    //     address[] memory funders = s_funders; here we made this a memory to save gas\\n    //     // mappings can't be in memory, sorry!\\n    //     for (\\n    //         uint256 funderIndex = 0;\\n    //         funderIndex < funders.length;\\n    //         funderIndex++\\n    //     ) {\\n    //         address funder = funders[funderIndex];\\n    //         s_addressToAmountFunded[funder] = 0;\\n    //     }\\n    //     s_funders = new address[](0);\\n    //     // payable(msg.sender).transfer(address(this).balance);\\n    //     (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    //     require(success);\\n    // }\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n}\",\"keccak256\":\"0xde8e6a2ac1bfff6b5c825c32660f9f9d6b8a11ffed31a5b70a9f7088aa15e311\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xafacc74fead86aa6a224262a47b60e2885a3f362d5820e137529276673e79a99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200119e3803806200119e833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611026620001786000396000818161046601526106b501526110266000f3fe60806040526004361061008a5760003560e01c80636b69a592116100595780636b69a5921461014d578063893d20e8146101785780639e87a5cd146101a3578063b60d4288146101ce578063d7b4750c146101d857610099565b80630343fb25146100a35780630d8e6e2c146100e05780630ec3b0271461010b5780633ccfd60b1461013657610099565b3661009957610097610215565b005b6100a1610215565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610931565b61034f565b6040516100d79190610977565b60405180910390f35b3480156100ec57600080fd5b506100f5610397565b6040516101029190610977565b60405180910390f35b34801561011757600080fd5b5061012061043e565b60405161012d91906109f1565b60405180910390f35b34801561014257600080fd5b5061014b610464565b005b34801561015957600080fd5b506101626106a4565b60405161016f9190610977565b60405180910390f35b34801561018457600080fd5b5061018d6106b1565b60405161019a9190610a1b565b60405180910390f35b3480156101af57600080fd5b506101b86106d9565b6040516101c591906109f1565b60405180910390f35b6101d6610215565b005b3480156101e457600080fd5b506101ff60048036038101906101fa9190610a62565b610703565b60405161020c9190610a1b565b60405180910390f35b6802b5e3af16b1880000610254600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461074b90919063ffffffff16565b1015610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c90610aec565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e39190610b3b565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561040157600080fd5b505afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610ba6565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105945760006001828154811061050f5761050e610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061058c90610c02565b9150506104ec565b50600067ffffffffffffffff8111156105b0576105af610c4b565b5b6040519080825280602002602001820160405280156105de5781602001602082028036833780820191505090505b50600190805190602001906105f4929190610827565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161061b90610cab565b60006040518083038185875af1925050503d8060008114610658576040519150601f19603f3d011682016040523d82523d6000602084013e61065d565b606091505b50509050806106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890610d0c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061071957610718610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061075783610787565b90506000670de0b6b3a764000085836107709190610d2c565b61077a9190610db5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190610e5e565b5050509150506402540be4008161081f9190610ed9565b915050919050565b8280548282559060005260206000209081019282156108a0579160200282015b8281111561089f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610847565b5b5090506108ad91906108b1565b5090565b5b808211156108ca5760008160009055506001016108b2565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108fe826108d3565b9050919050565b61090e816108f3565b811461091957600080fd5b50565b60008135905061092b81610905565b92915050565b600060208284031215610947576109466108ce565b5b60006109558482850161091c565b91505092915050565b6000819050919050565b6109718161095e565b82525050565b600060208201905061098c6000830184610968565b92915050565b6000819050919050565b60006109b76109b26109ad846108d3565b610992565b6108d3565b9050919050565b60006109c98261099c565b9050919050565b60006109db826109be565b9050919050565b6109eb816109d0565b82525050565b6000602082019050610a0660008301846109e2565b92915050565b610a15816108f3565b82525050565b6000602082019050610a306000830184610a0c565b92915050565b610a3f8161095e565b8114610a4a57600080fd5b50565b600081359050610a5c81610a36565b92915050565b600060208284031215610a7857610a776108ce565b5b6000610a8684828501610a4d565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ad6601b83610a8f565b9150610ae182610aa0565b602082019050919050565b60006020820190508181036000830152610b0581610ac9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b468261095e565b9150610b518361095e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b8657610b85610b0c565b5b828201905092915050565b600081519050610ba081610a36565b92915050565b600060208284031215610bbc57610bbb6108ce565b5b6000610bca84828501610b91565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c0d8261095e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4057610c3f610b0c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c95600083610c7a565b9150610ca082610c85565b600082019050919050565b6000610cb682610c88565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cf6600b83610a8f565b9150610d0182610cc0565b602082019050919050565b60006020820190508181036000830152610d2581610ce9565b9050919050565b6000610d378261095e565b9150610d428361095e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7b57610d7a610b0c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dc08261095e565b9150610dcb8361095e565b925082610ddb57610dda610d86565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e0581610de6565b8114610e1057600080fd5b50565b600081519050610e2281610dfc565b92915050565b6000819050919050565b610e3b81610e28565b8114610e4657600080fd5b50565b600081519050610e5881610e32565b92915050565b600080600080600060a08688031215610e7a57610e796108ce565b5b6000610e8888828901610e13565b9550506020610e9988828901610e49565b9450506040610eaa88828901610b91565b9350506060610ebb88828901610b91565b9250506080610ecc88828901610e13565b9150509295509295909350565b6000610ee482610e28565b9150610eef83610e28565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f2e57610f2d610b0c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f6b57610f6a610b0c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fa857610fa7610b0c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610fe557610fe4610b0c565b5b82820290509291505056fea26469706673582212209d20a48f83372543ae2d3740c7d078e5e3597128d4f5be5a92a9559cb42fc05964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636b69a592116100595780636b69a5921461014d578063893d20e8146101785780639e87a5cd146101a3578063b60d4288146101ce578063d7b4750c146101d857610099565b80630343fb25146100a35780630d8e6e2c146100e05780630ec3b0271461010b5780633ccfd60b1461013657610099565b3661009957610097610215565b005b6100a1610215565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610931565b61034f565b6040516100d79190610977565b60405180910390f35b3480156100ec57600080fd5b506100f5610397565b6040516101029190610977565b60405180910390f35b34801561011757600080fd5b5061012061043e565b60405161012d91906109f1565b60405180910390f35b34801561014257600080fd5b5061014b610464565b005b34801561015957600080fd5b506101626106a4565b60405161016f9190610977565b60405180910390f35b34801561018457600080fd5b5061018d6106b1565b60405161019a9190610a1b565b60405180910390f35b3480156101af57600080fd5b506101b86106d9565b6040516101c591906109f1565b60405180910390f35b6101d6610215565b005b3480156101e457600080fd5b506101ff60048036038101906101fa9190610a62565b610703565b60405161020c9190610a1b565b60405180910390f35b6802b5e3af16b1880000610254600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461074b90919063ffffffff16565b1015610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c90610aec565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e39190610b3b565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561040157600080fd5b505afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610ba6565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105945760006001828154811061050f5761050e610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061058c90610c02565b9150506104ec565b50600067ffffffffffffffff8111156105b0576105af610c4b565b5b6040519080825280602002602001820160405280156105de5781602001602082028036833780820191505090505b50600190805190602001906105f4929190610827565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161061b90610cab565b60006040518083038185875af1925050503d8060008114610658576040519150601f19603f3d011682016040523d82523d6000602084013e61065d565b606091505b50509050806106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890610d0c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061071957610718610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061075783610787565b90506000670de0b6b3a764000085836107709190610d2c565b61077a9190610db5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190610e5e565b5050509150506402540be4008161081f9190610ed9565b915050919050565b8280548282559060005260206000209081019282156108a0579160200282015b8281111561089f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610847565b5b5090506108ad91906108b1565b5090565b5b808211156108ca5760008160009055506001016108b2565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108fe826108d3565b9050919050565b61090e816108f3565b811461091957600080fd5b50565b60008135905061092b81610905565b92915050565b600060208284031215610947576109466108ce565b5b60006109558482850161091c565b91505092915050565b6000819050919050565b6109718161095e565b82525050565b600060208201905061098c6000830184610968565b92915050565b6000819050919050565b60006109b76109b26109ad846108d3565b610992565b6108d3565b9050919050565b60006109c98261099c565b9050919050565b60006109db826109be565b9050919050565b6109eb816109d0565b82525050565b6000602082019050610a0660008301846109e2565b92915050565b610a15816108f3565b82525050565b6000602082019050610a306000830184610a0c565b92915050565b610a3f8161095e565b8114610a4a57600080fd5b50565b600081359050610a5c81610a36565b92915050565b600060208284031215610a7857610a776108ce565b5b6000610a8684828501610a4d565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ad6601b83610a8f565b9150610ae182610aa0565b602082019050919050565b60006020820190508181036000830152610b0581610ac9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b468261095e565b9150610b518361095e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b8657610b85610b0c565b5b828201905092915050565b600081519050610ba081610a36565b92915050565b600060208284031215610bbc57610bbb6108ce565b5b6000610bca84828501610b91565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c0d8261095e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4057610c3f610b0c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c95600083610c7a565b9150610ca082610c85565b600082019050919050565b6000610cb682610c88565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cf6600b83610a8f565b9150610d0182610cc0565b602082019050919050565b60006020820190508181036000830152610d2581610ce9565b9050919050565b6000610d378261095e565b9150610d428361095e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7b57610d7a610b0c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dc08261095e565b9150610dcb8361095e565b925082610ddb57610dda610d86565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e0581610de6565b8114610e1057600080fd5b50565b600081519050610e2281610dfc565b92915050565b6000819050919050565b610e3b81610e28565b8114610e4657600080fd5b50565b600081519050610e5881610e32565b92915050565b600080600080600060a08688031215610e7a57610e796108ce565b5b6000610e8888828901610e13565b9550506020610e9988828901610e49565b9450506040610eaa88828901610b91565b9350506060610ebb88828901610b91565b9250506080610ecc88828901610e13565b9150509295509295909350565b6000610ee482610e28565b9150610eef83610e28565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f2e57610f2d610b0c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f6b57610f6a610b0c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fa857610fa7610b0c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610fe557610fe4610b0c565b5b82820290509291505056fea26469706673582212209d20a48f83372543ae2d3740c7d078e5e3597128d4f5be5a92a9559cb42fc05964736f6c63430008080033",
  "devdoc": {
    "author": "bones",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "this implements price feeds"
      },
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "FundMe: A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function funds this contract"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
